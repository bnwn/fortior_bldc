C51 COMPILER V9.52.0.0   FTECH_BLDCV2_3_1                                                  07/04/2016 19:47:56 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE FTECH_BLDCV2_3_1
OBJECT MODULE PLACED IN .\obj\Ftech_BLDCV2.3.1.obj
COMPILER INVOKED BY: d:\Keil c51_fu68xx\C51\BIN\C51.EXE User\Source\Ftech_BLDCV2.3.1.c LARGE OMF2 WARNINGLEVEL(0) OPTIMI
                    -ZE(SIZE) BROWSE NOAREGS INCDIR(.\Library\Include;.\User\Include) DEBUG PRINT(.\obj\Ftech_BLDCV2.3.1.lst) TABS(2) OBJECT(
                    -.\obj\Ftech_BLDCV2.3.1.obj)

line level    source

   1          
   2          /************************ (C) COPYRIGHT 2015 FT *******************************
   3          * File Name          : 
   4          * Author             : Application Team  Tom.wang 
   5          * Version            : V2.0.0
   6          * Date               : 06/15/2015
   7          * Description        : 
   8          ********************************************************************************
   9          /*******************************************************************************
  10          * All Rights Reserved
  11          *******************************************************************************/
  12          
  13          /* Includes ------------------------------------------------------------------*/
  14          #include <FU68xx.h>
  15          #include <Myproject.h>
  16          #include "sys_conf.h"
  17          /* Private typedef -----------------------------------------------------------*/
  18          /* Private define ------------------------------------------------------------*/
  19          /* Private macro -------------------------------------------------------------*/
  20          /* Private variables ---------------------------------------------------------*/
  21          uc8 TIM1CRO_CW[8] = {0x00,0xBC,0x7A,0xB9,0x7C,0xBA,0x79,0XFF};   //CW  检测表
  22          uc8 TIM1CRO_CCW[8] = {0x00,0x7C,0xBA,0x79,0xBC,0x7A,0xB9,0XFF};   //CCW 检测表
  23          uc8 BEMF2SECTION[8] = {0,1,3,2,5,6,4,7};
  24          
  25          extern uc16 DRV_SECTION2OCM[8];             //扇区
  26          /* Private function prototypes -----------------------------------------------*/
  27          void Drv_HallDriveS(u8 Step);                //有HALL换相
  28          
  29          void Drv_BemfdelayAngle(u16 Angle);          //换相进角
  30          void Drv_BemfMaskAngle(u16 Angle);           //
  31          void Drv_BemfPhaseChoice(u8 Step);          //BEMF检测选择
  32          void Drv_BemfTim1PDapp(void) ;              //bemf位置检测中断服务函数
  33          void Drv_BemfTim1RUapp(void) ;              //bemf下溢中断服务函数
  34          u8 Drv_SectionCheak(void);                  //转速跟踪
  35          /* Private functions ---------------------------------------------------------*/
  36          
  37          
  38          /*******************************************************************************
  39          * Function Name  : Drv_HallDriveS
  40          * Description    : 
  41          * Input          : None
  42          * Output         : None
  43          * Return         : None
  44          *******************************************************************************/
  45          void Drv_HallDriveS(u8 Step)
  46          {
  47   1        u8 u8temp;
  48   1      
  49   1        u8temp = 18;
  50   1        Ctl.Step = Step;
  51   1      
  52   1        if(Ctl.StepPre != Ctl.Step)
  53   1        {
C51 COMPILER V9.52.0.0   FTECH_BLDCV2_3_1                                                  07/04/2016 19:47:56 PAGE 2   

  54   2          Ctl.StepPre = Ctl.Step; 
  55   2          if((Ctl.State == MOTOR_NORMAL)||(Ctl.State == MOTOR_PRECHARGE))
  56   2          {
  57   3            if((Drv.Hall.u8ChangePhaseNum < u8temp)||(Drv.Hall.s16AdvanceEangle == 0))
  58   3            {
  59   4              Drv.Hall.u8ChangePhaseNum++;
  60   4              SetBit(TIM1_CR3,OPS0,0);             //软件写DBR触发换相
  61   4              TIM1_DBR = DRV_SECTION2OCM[Ctl.Step];
  62   4              Drv.Hall.u8ChangePhaseFlag = 0xFF;  
  63   4            }
  64   3            if((Drv.Hall.u8ChangePhaseNum == u8temp)&&((Drv.Hall.s16AdvanceEangle != 0)))
  65   3            {
  66   4              Drv.Hall.u8ChangePhaseNum = u8temp;
  67   4              SetBit(TIM1_CR1,RCEN, 0);                 //失能Preload定时器
  68   4              SetBit(TIM1_IER,RUIE,0);
  69   4              
  70   4              if(Drv.Hall.u8ChangePhaseFlag == 0x7F)
  71   4              {
  72   5                SetBit(TIM1_CR3,OPS0,0);               //软件写DBR触发换相
  73   5                Drv.Hall.u8ChangePhaseFlag = 0xFF;     //HALL换相 
  74   5                TIM1_DBR = DRV_SECTION2OCM[Ctl.Step];  //换向
  75   5              }
  76   4              if(Drv.Hall.s16AdvanceEangle < 0)
  77   4              {
  78   5                Drv_BemfdelayAngle( 32767.0 + Drv.Hall.s16AdvanceEangle);
  79   5                SetBit(TIM1_CR3,OPS0,1);               //使能定时器下溢换相
  80   5                Drv_SetStep();                         //预换相扇区给定
  81   5                TIM1_DBR = DRV_SECTION2OCM[Ctl.Step];  //预换相
  82   5              }
  83   4              else
  84   4              {
  85   5                Drv_BemfdelayAngle(Drv.Hall.s16AdvanceEangle);
  86   5                SetBit(TIM1_CR3,OPS0,1);               //使能定时器下溢换相
  87   5                TIM1_DBR = DRV_SECTION2OCM[Ctl.Step];  //预换相
  88   5              }
  89   4              
  90   4              Ctl.Bemf.IRQ = BEMFCOMMUTATION; 
  91   4              Drv.Hall.u8ChangePhaseFlag = 0x7F;     //定时器换相
  92   4      
  93   4              SetBit(TIM1_IER,RUIE,1);               //使能Preload定时器下溢中断
  94   4              SetBit(TIM1_CR1,RCEN,1);               //启动Preload定时器
  95   4            }
  96   3          }
  97   2        }   
  98   1      }
  99          
 100          /*******************************************************************************
 101          * Function Name  : Drv_BemfPhaseChoice    
 102          * Description    : 反电势检测相选择，根据需要检测相 开启相应的比较器
 103          * Input          : Step
 104          * Output         : None
 105          * Return         : None
 106          *******************************************************************************/
 107          void Drv_BemfPhaseChoice(u8 Step)
 108          {
 109   1        if (Ctl.direction == CW)
 110   1        {
 111   2          TIM1_CR0 = TIM1CRO_CW[Step];
 112   2        }
 113   1        else if (Ctl.direction == CCW)
 114   1        {
 115   2          TIM1_CR0 = TIM1CRO_CCW[Step];
C51 COMPILER V9.52.0.0   FTECH_BLDCV2_3_1                                                  07/04/2016 19:47:56 PAGE 3   

 116   2        }
 117   1      }
 118          
 119          /*******************************************************************************
 120          * Function Name  : Drv_SetStep    
 121          * Description    : 
 122          * Input          : None
 123          * Output         : None
 124          * Return         : None
 125          *******************************************************************************/
 126          u8 Drv_SectionCheak(void)
 127            {
 128   1          s8 Value;
 129   1          
 130   1          Drv.Stk.BemfNum++;        //BEMF 中断次数
 131   1      
 132   1          if(Drv.Stk.BemfValue <= 6)
 133   1            {
 134   2              Drv.Stk.BemfTabA = BEMF2SECTION[Drv.Stk.BemfValue];
 135   2              Value = Drv.Stk.BemfTabA - Drv.Stk.BemfTabB;
 136   2              if(Value>=5) 
 137   2              {
 138   3                Value = Value-6;
 139   3              }
 140   2              else if(Value<=-5)
 141   2              {
 142   3                Value = Value+6;
 143   3              }
 144   2                
 145   2              Drv.Stk.BemfTabB = Drv.Stk.BemfTabA;
 146   2      //----------------------------------------------------
 147   2              if(Value == 1)
 148   2              {
 149   3                Drv.Stk.RefNumY++;      //CW 计数  
 150   3                Drv.Stk.RefNumX = 0;    //方向不定 清零
 151   3              }
 152   2              else if(Value == -1)
 153   2              {
 154   3                Drv.Stk.RefNumY--;      //CCW 计数
 155   3                Drv.Stk.RefNumX = 0;    //方向不定 清零
 156   3              }
 157   2              else
 158   2              {
 159   3                Drv.Stk.RefNumX++;      //方向不定 清零
 160   3              }
 161   2      
 162   2              if(Drv.Stk.RefNumY > Drv.Stk.Calcnum)
 163   2              {
 164   3                Drv.Stk.RefNumY = Drv.Stk.Calcnum;
 165   3              }   
 166   2              else if(Drv.Stk.RefNumY <- Drv.Stk.Calcnum)
 167   2              {
 168   3                Drv.Stk.RefNumY = -Drv.Stk.Calcnum;
 169   3              }
 170   2      //--------------------------------------------------------
 171   2      //方向判断
 172   2              if(Drv.Stk.RefNumY >= Drv.Stk.Calcnum)
 173   2              {
 174   3                Drv.Stk.BemfFR = CW;
 175   3              }
 176   2              else if(Drv.Stk.RefNumY <= -Drv.Stk.Calcnum)
 177   2              {
C51 COMPILER V9.52.0.0   FTECH_BLDCV2_3_1                                                  07/04/2016 19:47:56 PAGE 4   

 178   3                Drv.Stk.BemfFR = CCW;
 179   3              }
 180   2              else  
 181   2              {
 182   3                Drv.Stk.BemfFR = 0xFF; 
 183   3              }
 184   2      
 185   2              if(Drv.Stk.RefNumX >= 10)
 186   2              {
 187   3                Drv.Stk.BemfFR = 0X7F;
 188   3              }
 189   2            }
 190   1          return  Drv.Stk.BemfFR;
 191   1        }
 192          /*******************************************************************************
 193          * Function Name  : Drv_BemfdelayAngle    
 194          * Description    : 
 195          * Input          : u8 Angle
 196          * Output         : None
 197          * Return         : None
 198          *******************************************************************************/
 199          void Drv_BemfdelayAngle(u16 Angle)
 200          {
 201   1        if(Angle !=0)
 202   1        {
 203   2          MDUControl.DelayAngleIn = Angle; 
 204   2          MDUControl.FlagDelayAngleTime = 0x7F;
 205   2      
 206   2          if( MDUControl.DelayAngleOut > 10000)
 207   2          {                                
 208   3             MDUControl.DelayAngleOut = 10000;
 209   3          }
 210   2          else if( MDUControl.DelayAngleOut < 10)
 211   2          {
 212   3            MDUControl.DelayAngleOut = 10;
 213   3          }
 214   2          if(MDUControl.DelayAngleOutRef < MDUControl.DelayAngleOut)
 215   2          {
 216   3            MDUControl.DelayAngleOutRef++;
 217   3          }
 218   2          else
 219   2          {
 220   3            MDUControl.DelayAngleOutRef--;
 221   3          }
 222   2                    
 223   2          Drv_Commutation(Ctl.Step);             //预换相
 224   2          SetBit(TIM1_CR1,RCEN,0);               //失能Preload定时器
 225   2      
 226   2          SetBit(TIM1_IER,RUIE,1);               //使能Preload定时器下溢中断
 227   2          SetBit(TIM1_CR1,RCEN,1);               //启动Preload定时器
 228   2          TIM1_RARR = MDUControl.DelayAngleOut;
 229   2          TIM1_RCNTR = TIM1_RARR;   
 230   2          Ctl.Bemf.IRQ = BEMFCOMMUTATION;     
 231   2        }
 232   1        else
 233   1        {
 234   2          MDUControl.DelayAngleOut = 1;
 235   2          SetBit(TIM1_CR3,OPS0,0);               //软件写DBR触发换相
 236   2          Drv_Commutation(Ctl.Step);             //预换相
 237   2      
 238   2          Drv_BemfMaskAngle(Ctl.Bemf.MaskAngle);
 239   2          
C51 COMPILER V9.52.0.0   FTECH_BLDCV2_3_1                                                  07/04/2016 19:47:56 PAGE 5   

 240   2          SetBit(TIM1_CR1,RCEN,0);               //失能Preload定时器
 241   2        }
 242   1      }
 243          
 244          /*******************************************************************************
 245          * Function Name  : Drv_BemfdelayAngle    
 246          * Description    : 
 247          * Input          : u8 Angle
 248          * Output         : None
 249          * Return         : None
 250          *******************************************************************************/
 251          void Drv_BemfMaskAngle(u16 Angle)
 252          {
 253   1        u16 u16temp;
 254   1        
 255   1        SetBit(TIM1_CR1, RCEN, 0);             //失能Preload定时器
 256   1      
 257   1        if(Angle != 0)
 258   1        {
 259   2          MDUControl.MaskAngleIn = Angle; 
 260   2          MDUControl.FlagMaskAngleTime = 0x7F;
 261   2      //    if(MDUControl.MaskAngleOut > 500)
 262   2      //    {
 263   2      //      MDUControl.MaskAngleOut = 500;
 264   2      //    }
 265   2      //    else if(MDUControl.MaskAngleOut < 20)
 266   2      //    {
 267   2      //      MDUControl.MaskAngleOut = 20;
 268   2      //    }  
 269   2         
 270   2          TIM1_RARR = MDUControl.MaskAngleOut;
 271   2          TIM1_RCNTR = TIM1_RARR;
 272   2          
 273   2          Ctl.Bemf.IRQ = BEMFCMASK; 
 274   2          SetBit(TIM1_IER,RUIE,1);               //使能Preload定时器下溢中断
 275   2          SetBit(TIM1_CR1,RCEN,1);               //启动Preload定时器   
 276   2        }
 277   1        else
 278   1        {
 279   2          MDUControl.MaskAngleOut = 1;
 280   2      //    Ctl.Bemf.MaskTime-- ;
 281   2      //    if(Ctl.Bemf.MaskTime  < 10)
 282   2      //    {
 283   2      //      Ctl.Bemf.MaskTime  = 10;
 284   2      //    }
 285   2          u16temp = 1;
 286   2          while(u16temp--) _nop_();
 287   2          Drv_BemfPhaseChoice(Ctl.Step);         //开启边沿检测         
 288   2          Ctl.Bemf.IRQ = BEMFNONE;
 289   2        }
 290   1      }
 291          
 292          /*******************************************************************************
 293          * Function Name  : Drv_BemfTim1PDapp    
 294          * Description    : 
 295          * Input          : None
 296          * Output         : None
 297          * Return         : None
 298          *******************************************************************************/
 299          void Drv_BemfTim1PDapp(void) 
 300          {
 301   1        if(Ctl.State == MOTOR_STRACK)
C51 COMPILER V9.52.0.0   FTECH_BLDCV2_3_1                                                  07/04/2016 19:47:56 PAGE 6   

 302   1        {
 303   2          Ctl.Bemf.CmpOut = (CMP_SR>>4)&0x07;   
 304   2          Drv.Stk.BemfValue = Ctl.Bemf.CmpOut; 
 305   2          Drv_SectionCheak();                    //转速跟踪
 306   2          Drv.speed.EventPeriod = TIM1_BCCR;
 307   2        }
 308   1        else if(Ctl.State == MOTOR_OPENLOOP)
 309   1        {
 310   2          if((Ctl.Ramp.cpmode==1)||(Ctl.Ramp.cpmode==2))
 311   2          {
 312   3            TIM1_CR0 = 0;                          //关闭BEMF检测 
 313   3            Ctl.Ramp.cpTimBufCur = TIM1_BCCR;
 314   3      
 315   3            SetBit(TIM1_CR3,OPS0,0);               //软件写DBR触发换相 
 316   3            Drv_SetStep();                         //预换相扇区给定
 317   3            Drv_Commutation(Ctl.Step);             //预换相
 318   3            Ctl.Ramp.cpNmsCount = 0;
 319   3            
 320   3            if((Ctl.Ramp.cpTimBufCur > Ctl.Ramp.cpTimBufPer>>2)&&(Ctl.Ramp.cpTimBufCur>>2 < Ctl.Ramp.cpTimBufPer
             -))
 321   3            {
 322   4              Ctl.Ramp.cpCntNormal++; 
 323   4            }
 324   3            else
 325   3            {
 326   4              if(Ctl.Ramp.cpCntNormal > 1)
 327   4              {
 328   5                Ctl.Ramp.cpCntNormal--;
 329   5              }
 330   4              Ctl.Ramp.cpCntErr++;
 331   4              
 332   4              if(Ctl.Ramp.cpCntErr > Ctl.Ramp.cpBEMFCntFilt)
 333   4              {
 334   5                Ctl.Ramp.cpNumA = 0;
 335   5                Ctl.Ramp.cpNumB = 0;
 336   5                Ctl.Ramp.cpNmsCount = 0;
 337   5                Drv.PWM.Dutytarget = Ctl.Ramp.cpDutySta;
 338   5                Drv.PWM.DutyCurrent = Ctl.Ramp.cpDutySta; 
 339   5      
 340   5                Ctl.Ramp.cpCntNormal = 0;
 341   5                Ctl.Ramp.cpCntFail++;
 342   5                if(Ctl.Ramp.cpCntFail > Ctl.Ramp.cpNumFail)
 343   5                {
 344   6                  Ctl.State = MOTOR_READY;
 345   6                }
 346   5              }
 347   4            }
 348   3            Ctl.Ramp.cpTimBufPer = Ctl.Ramp.cpTimBufCur; 
 349   3            if(Ctl.Ramp.cpCntNormal > Ctl.Ramp.cpBEMFCnt) 
 350   3            {
 351   4              if(Ctl.Ramp.cpmode == 1)
 352   4              {
 353   5                Drv_BemfPhaseChoice(0);
 354   5                
 355   5                TIM1_BCNTR = 0;
 356   5                TIM2_ARR = Drv.PWM.PwmArr;           //载波频率 = 24M/1500 =16K
 357   5                
 358   5                SetBit(TIM1_CR3,OPS0,0);               //软件写DBR触发换相
 359   5                SetBit(TIM1_CR1, RCEN, 0);             //失能Preload定时器
 360   5      
 361   5                TIM1_BCNTR = 0;
 362   5                SetBit(TIM1_CR1,RCEN,0);               //失能Preload定时器 
C51 COMPILER V9.52.0.0   FTECH_BLDCV2_3_1                                                  07/04/2016 19:47:56 PAGE 7   

 363   5                TIM1_RARR = Ctl.Ramp.cpMaskTime;
 364   5                TIM1_RCNTR = TIM1_RARR;
 365   5                CLRFlag_RUIF;
 366   5                Ctl.Bemf.IRQ = BEMFCMASK;              
 367   5                SetBit(TIM1_IER,RUIE,1);               //使能Preload定时器下溢中断
 368   5                SetBit(TIM1_CR1,RCEN,1);               //启动Preload定时器  
 369   5                  
 370   5                Drv.PWM.Dutytarget = Ctl.Ramp.cpDutyEnd ;                 //充电占空比
 371   5                Drv.PWM.DutyCurrent = Drv.PWM.Dutytarget;
 372   5                pid_spd.Out = Ctl.Ramp.cpDutyEnd;
 373   5                //SetBit(CMP_CR2, CMPSAME, 0);
 374   5                Ctl.State = MOTOR_NORMAL;
 375   5              }
 376   4              else if(Ctl.Ramp.cpmode == 2)
 377   4              {
 378   5                Ctl.State = MOTOR_READY;
 379   5              }
 380   4            }
 381   3            else
 382   3            {
 383   4              TIM1_BCNTR = 0;
 384   4              SetBit(TIM1_CR1,RCEN,0);               //失能Preload定时器 
 385   4              TIM1_RARR = Ctl.Ramp.cpMaskTime ;
 386   4              TIM1_RCNTR = TIM1_RARR;
 387   4              CLRFlag_RUIF;
 388   4              Ctl.Bemf.IRQ = BEMFCMASK;              //
 389   4              SetBit(TIM1_IER,RUIE,1);               //使能Preload定时器下溢中断
 390   4              SetBit(TIM1_CR1,RCEN,1);               //启动Preload定时器
 391   4              
 392   4            }
 393   3          }
 394   2        }
 395   1        else if(Ctl.State == MOTOR_NORMAL)
 396   1        {
 397   2          TIM1_CR0 = 0;                          //关闭BEMF检测 
 398   2          SetBit(TIM1_CR3,OPS0,1);               //使能定时器下溢换相
 399   2          Drv_SetStep();                         //预换相扇区给定
 400   2          Drv_BemfdelayAngle(Ctl.Bemf.CTAngle);  //延时30度换相 
 401   2          PDEventPeriodCalc();
 402   2        }
 403   1      }  
 404          
 405          /*******************************************************************************
 406          * Function Name  : Drv_BemfTim1RUapp    
 407          * Description    : 
 408          * Input          : None
 409          * Output         : None
 410          * Return         : None
 411          *******************************************************************************/
 412          void Drv_BemfTim1RUapp(void) 
 413          {
 414   1        SetBit(TIM1_CR3,OPS0,0);                 //使能定时器下溢换相
 415   1        if(Ctl.Bemf.IRQ == BEMFCOMMUTATION)    
 416   1        {
 417   2          Drv_BemfMaskAngle(Ctl.Bemf.MaskAngle); 
 418   2        }
 419   1        else if(Ctl.Bemf.IRQ == BEMFCMASK)
 420   1        {
 421   2          SetBit(TIM1_CR1, RCEN, 0);             //失能Preload定时器
 422   2      
 423   2          if(Ctl.Bemf.SPItest)
 424   2          {
C51 COMPILER V9.52.0.0   FTECH_BLDCV2_3_1                                                  07/04/2016 19:47:56 PAGE 8   

 425   3            NSS_ONOFF;                           //++++测试信号 
 426   3          }
 427   2      
 428   2          Drv_BemfPhaseChoice(Ctl.Step);         //开启边沿检测         
 429   2          Ctl.Bemf.IRQ = BEMFNONE;
 430   2        }
 431   1      }
 432          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1721    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
